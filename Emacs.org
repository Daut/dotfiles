#+TITLE: Daut's Configuration
#+PROPERTY: header-args:emacs-lisp :mkdirp yes :tangle .emacs.d/init.el
#+STARTUP: overview

* Startup Performance
#+begin_src emacs-lisp
;; Bug in Emacs 28.2 remove once updated https://emacs.stackexchange.com/questions/74289/emacs-28-2-error-in-macos-ventura-image-type-invalid-image-type-svg
(add-to-list 'image-types 'svg)

;; The default is 800 kilobytes. Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Improve lsp perf https://emacs-lsp.github.io/lsp-mode/page/performance/#increase-the-amount-of-data-which-emacs-reads-from-the-process
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(defun daut/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'daut/display-startup-time)

#+end_src
* Package System Setup
#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose t) ;; write useful information about package loading

#+end_src

** Auto update packages
#+begin_src emacs-lisp

(use-package auto-package-update
  :custom
  ;; interval in days
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results nil)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

#+end_src
* Restart Emacs Command
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src
* Keep init.el Clean
#+begin_src emacs-lisp

;; Save all of the custom data in custom.el
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
(use-package no-littering
  :config
  (setq create-lockfiles nil))

 #+end_src
* Environment Vars
Environment variables sometimes aren't right, this fixes it.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :demand
  :config
  (setq exec-path-from-shell-check-startup-files nil)
  (setq exec-path-from-shell-variables '("PATH" "MANPATH" "GOPATH" "GOPRIVATE" "PYTHONPATH" "NODE_PATH" "RUSTUP_HOME" "CARGO_HOME"))
  (setq exec-path-from-shell-arguments '("-l"))
  (exec-path-from-shell-initialize))
#+end_src
* Server Mode
#+begin_src emacs-lisp
(server-start)
#+end_src
* UI Configuration
** Basic
#+begin_src emacs-lisp

;; Hide startup message
(setq inhibit-startup-message t)

;; set line-spacing
(setq default-text-properties '(line-spacing 0.05 line-height 1.1))

(scroll-bar-mode -1) ; Disable visible scrollbar
(tool-bar-mode -1)   ; Disable the toolbar
(tooltip-mode -1)    ; Disable tooltips
(set-fringe-mode 10) ; Give some breathing room

(menu-bar-mode -1)   ; Disable menu bar

;; display line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

;; disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook
                treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; highlight current cursor line
(global-hl-line-mode +1)

;; change cursor type
(setq-default cursor-type 'bar)

;; open in fullscreen
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; disable the annoying bell ring
(setq ring-bell-function 'ignore)

#+end_src

* Font Configuration

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defvar daut/default-font-size 150)
  (set-face-attribute 'default nil :font "JetBrains Mono" :height daut/default-font-size))
#+end_src

* Keybinding Configuration
** Custom functions
#+begin_src emacs-lisp

;; scroll up/down one line
(global-set-key (kbd "C-s-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "C-s-p") (kbd "C-u 1 M-v"))

;; Make ESC quit promps
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun daut/backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive)
  (delete-region (point) (progn (backward-word arg) (point))))

(defun daut/delete-word (arg)
  "Delete characters forwards until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun daut/backward-delete-char-or-word ()
  "backward delete behave more like VS Code"
  (interactive)
  (cond
   ((looking-back (rx (char word)) 1)
    (daut/backward-delete-word 1))
   ((looking-back (rx (char blank)) 1)
    (delete-horizontal-space t))
   (t
    (backward-delete-char 1))))
#+end_src
** General package
#+begin_src emacs-lisp

(use-package general
  :config
  (general-create-definer daut/leader-keys
    :prefix "C-C")
  (daut/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "o"  '(:ignore t :which-key "org-files")
    "s"  '(:ignore t :which-key "shell/sql")
    "f"  '(:ignore t :which-key "files or folders")
    "h"  '(:ignore t :which-key "hydra")
    "w"  '(:ignore t :which-key "window")
    "fd" '(:ignore t :which-key "directories")
    "fdp" '((lambda () (interactive) (dired "~/projects")) :which-key "projects")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "se" '(eshell :which-key "eshell")
    "sE" '((lambda () (interactive) (eshell t)) :which-key "New eshell")
    "sc" '(sql-connect :which-key "sql-connect")

    "oc" '(org-capture t :which-key "org-capture")
    "oa" '(org-agenda t :which-key "org-agenda")
    "oi" '((lambda () (interactive) (find-file (expand-file-name "~/projects/org/gtd/inbox.org"))) :which-key "inbox.org")
    "og" '((lambda () (interactive) (find-file (expand-file-name "~/projects/org/gtd/gtd.org"))) :which-key "gtd.org")
    "oe" '((lambda () (interactive) (find-file (expand-file-name "~/projects/dotfiles/Emacs.org"))) :which-key "Emacs.org")
    "ot" '((lambda () (interactive) (find-file (expand-file-name "~/projects/org/Tasks.org"))) :which-key "Tasks.org")
    "od" '((lambda () (interactive) (find-file (expand-file-name "~/projects/org/Daily.org"))) :which-key "Daily.org"))

  (general-define-key
   :keymaps 'global-map
   "C-s-n" (kbd "C-u 1 C-v")
   "C-s-p" (kbd "C-u 1 M-v")

   "<escape>" 'keyboard-escape-quit

   [remap backward-kill-word] 'daut/backward-delete-char-or-word
   [remap kill-word] 'daut/delete-word

   "C-s-," (lambda () (interactive) (forward-line -30))
   "C-s-." (lambda () (interactive) (forward-line 30))

   "s-<" #'beginning-of-buffer
   "s->" #'end-of-buffer))

#+end_src
** Crux package
#+begin_src emacs-lisp

(use-package crux
  :bind
  ([remap move-beginning-of-line] . crux-move-beginning-of-line)
  ("C-c d" . crux-duplicate-current-line-or-region)
  ("C-c k" . crux-kill-other-buffers)
  ("C-c b s" . crux-create-scratch-buffer))

#+end_src

* Editing Configuration
** Delete selection with a keypress
#+begin_src emacs-lisp

(delete-selection-mode t)

#+end_src
** Tab Widths
#+begin_src emacs-lisp

(setq-default tab-width 2)

#+end_src

** Use spaces instead of tabs for indentation
#+begin_src emacs-lisp

(setq-default indent-tabs-mode nil)

#+end_src
** Commenting lines
#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("s-/" . evilnc-comment-or-uncomment-lines))

#+end_src
** Insert newline at the end of the file
#+begin_src emacs-lisp

(setq require-final-newline t)

#+end_src
** Parenthesis matching

#+begin_src emacs-lisp

(use-package paren
  :config
  (show-paren-mode +1))

(use-package elec-pair
  :config
  (electric-pair-mode +1))

#+end_src
** Multiple cursors
#+begin_src emacs-lisp

(use-package multiple-cursors
  :bind ("s-d" . mc/mark-next-like-this-symbol))

#+end_src
** Move line/region up/down
#+begin_src emacs-lisp

(use-package move-text
  :bind
  ("C-s-j" . 'move-text-down)
  ("C-s-k" . 'move-text-up))

#+end_src
** Text folding
#+begin_src emacs-lisp

(use-package hideshow
  :diminish hs-minor-mode
  :hook
  (prog-mode . hs-minor-mode)
  (restclient-mode . hs-minor-mode)
  (nxml-mode . hs-minor-mode)
  (web-mode . hs-minor-mode)
  (html-mode .hs-minor-mode)
  :bind
  ("C-s-[" . hs-hide-block)
  ("C-s-]" . hs-show-block)
  :config
  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"
                 "<!--"
                 sgml-skip-tag-forward
                 nil)))

#+end_src
** Minimap with Minimap
#+begin_src emacs-lisp

(use-package minimap
  :defer t
  :config
  (setq minimap-window-location 'right
        minimap-update-delay 0
        minimap-width-fraction 0.09
        minimap-minimum-width 15))

#+end_src
** Indentation
#+begin_src emacs-lisp

(use-package aggressive-indent
  :diminish
  :hook (emacs-lisp-mode . aggressive-indent-mode))

#+end_src
** Expand Region
#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src
** Open Recently Closed File
#+begin_src emacs-lisp
(defvar daut/killed-file-list nil
  "List of recently killed files")

(defun daut/add-file-to-killed-file-list ()
  (when buffer-file-name
    (push buffer-file-name daut/killed-file-list)))

(add-hook 'kill-buffer-hook #'daut/add-file-to-killed-file-list)

(defun daut/reopen-killed-file ()
  (interactive)
  (when daut/killed-file-list
    (find-file (pop daut/killed-file-list))))

(global-set-key (kbd "s-T") 'daut/reopen-killed-file)
#+end_src
** Respect .editorconfig
#+begin_src emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+end_src
* UI Configuration
** Command Log Mode

#+begin_src emacs-lisp

;; defer loading of the package until command-log-mode is invoked
(use-package command-log-mode
  :commands command-log-mode)

#+end_src

** Color Theme
#+begin_src emacs-lisp

(use-package zenburn-theme
  :config
  (load-theme 'zenburn t))

#+end_src
** Better Modeline
*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package nerd-icons)

#+end_src

** Which Key

which-key is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.

#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

;; better mini-buffer completion
(use-package ivy
  :diminish
  :hook (after-init . ivy-mode)
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-partial-or-done)
         ("C-l" . ivy-immediate-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-immediate-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill)))

;; ivy-rich get extra information about commands
;; like description and keybinding
;; works only with counsel
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

;; package used to do search inside file
(use-package swiper
  :after ivy)

;; better UI for the M-x command, C-x b etc.
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . persp-counsel-switch-buffer)
         ("C-x C-f" . find-file)
         ("C-s-f" . counsel-git-grep)
         ("s-F" . counsel-git-grep)
         :map minibuffer-local-map ;; minibuffer only mapping
         ("C-r" . counsel-minibuffer-history))
  :config
  (counsel-mode 1))


#+end_src

** Helpful Help Commands
Helpful is an alternative to emacs builtin help which provides much more contextual information andbetter user experience
#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Hydra

#+begin_src emacs-lisp

(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "cancel" :exit t))

(defhydra hydra-window-scale (:timeout 4)
  "scale window horizontally"
  ("j" (enlarge-window-horizontally 5) "enlarge horizontally")
  ("k" (shrink-window-horizontally 5) "shrink horizontally")
  ("p" (enlarge-window 5) "enlarge vertically")
  ("n" (shrink-window 5) "shrink vertically")
  ("f" nil "cancel" :exit t))

(daut/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text")
  "ws" '(hydra-window-scale/body :which-key "horizontally scale window"))

#+end_src
** Indent Guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+end_src
* Org Mode Configuration
** Basic Configuration

#+begin_src emacs-lisp

(defun daut/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . daut/org-mode-setup)
  :commands (org-capture org-agenda)
  :config
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
  (setq org-ellipsis " ▾")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-agenda-files
        '("~/projects/org/gtd/inbox.org"
          "~/projects/org/gtd/gtd.org"
          "~/projects/org/gtd/tickler.org"))
  (setq org-refile-targets '(("~/projects/org/gtd/gtd.org" :maxlevel . 1)
                             ("~/projects/org/gtd/someday.org" :level . 1)
                             ("~/projects/org/gtd/tickler.org" :maxlevel . 1)))
  (setq org-capture-templates '(("t" "TODO [inbox]" entry
                                 (file+headline "~/projects/org/gtd/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/projects/org/gtd/tickler.org" "Tickler")
                                 "* %i% \n %U"))))

;; same effect for `tab' as in the language major mode buffer
(setq
 org-src-preserve-indentation t
 org-src-tab-acts-natively t)

#+end_src

** Nicer Heading bullets

#+begin_src emacs-lisp

;; (use-package org-bullets
;;   :hook (org-mode . org-bullets-mode)
;;   :custom
;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center Content
#+begin_src emacs-lisp

(defun daut/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . daut/org-mode-visual-fill))

#+end_src
** Org Babel Languages Configuration
#+begin_src emacs-lisp

(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (sql . t)
     (js . t)))

  (setq org-confirm-babel-evaluate nil))

#+end_src
** Structure Templates
#+begin_src emacs-lisp

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql")))

#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp

;; Automatically tangle Emacs.org config file on save
(defun daut/org-babel-tangle-configuration ()
  (when (string-equal (buffer-file-name)
		          (expand-file-name "~/projects/dotfiles/Emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'daut/org-babel-tangle-configuration)))

#+end_src
** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory "~/roam-notes")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup))
#+end_src
** Pomodoro
#+begin_src emacs-lisp
(setq org-clock-sound t)
#+end_src
* Development
** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :hook (after-init . projectile-mode)
  :bind
  ("C-c p" . projectile-command-map)
  ("s-p" . projectile-find-file)
  :init
  (setq projectile-sort-order 'recentf)
  ;; (setq projectile-enable-caching t)
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '(("~/projects" . 2))))
  (setq projectile-switch-project-action #'projectile-dired)
  (setq projectile-git-submodule-command nil)
  (setq projectile-use-git-grep t))

;; integrate counsel with projectile
;; (use-package counsel-projectile
;;   :after projectile
;;   :config (counsel-projectile-mode))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

;; install rainbow delimiters and hook them to any prog-mode (programming language mode)
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Company Mode
#+begin_src emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-selection))
  ;; (:map lsp-mode-map
  ;;       ("<tab>" . company-indent-or-complete-column))
  :config
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.2)
  (setq company-dabbrev-code-ignore-case t)
  (setq company-keywords-ignore-case t)
  (setq company-dabbrev-downcase t)
  (setq completion-ignore-case t)
  (setq company-transformers '(delete-consecutive-dups
                             company-sort-by-occurrence
                             company-sort-by-backend-importance))
  :init
  (setq company-backends '((company-capf :with company-yasnippet)
                           (company-dabbrev-code company-keywords company-files)
                           company-dabbrev)))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src
** Yasnippet
#+begin_src emacs-lisp

;; yasnippet
(use-package yasnippet
  :diminish yas-minor-mode
  :hook (after-init . yas-global-mode))

(use-package yasnippet-snippets
  :after yasnippet
  :config (yasnippet-snippets-initialize))

#+end_src
** Dired sidebar
#+begin_src emacs-lisp

;; dired-sidebar uses these
(use-package vscode-icon)

(use-package dired-sidebar
  :bind (("s-b" . dired-sidebar-toggle-sidebar))
  :commands (dired-sidebar-toggle-sidebar)
  :custom
  (dired-sidebar-display-alist '((side . right)))
  :config
  (setq dired-sidebar-theme 'vscode))

#+end_src
** Languages
*** Language Servers
#+begin_src emacs-lisp

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-completion-provider :none))

;; enhanced ui e.g. documentation popup
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-position 'top)
  (setq lsp-ui-doc-delay 0.5)
  (setq lsp-ui-doc-max-width 80)
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "u" '(:ignore t :wk "lsp ui")
   "ui" '(lsp-ui-imenu t :which-key "imenu")))

(use-package lsp-ivy
  :after lsp)

#+end_src
*** Debugging With dap-mode
#+begin_src emacs-lisp

(use-package dap-mode
  :bind
  ("C-c h d" . dap-hydra)
  :custom
  (lsp-enable-dap-auto-configure nil)
  :config
  (setq dap-print-io t)
  (dap-ui-mode 1)
  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix lsp-keymap-prefix
   "d" '(dap-hydra t :which-key "debugger")))

#+end_src
*** TypeScript
#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts[x]\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2)
  (require 'dap-node)
  (dap-node-setup))

#+end_src
*** JavaScript
#+begin_src emacs-lisp
(defun daut/js-standard-fix-file ()
  (interactive)
  (when (eq major-mode 'js-mode)
    (shell-command (concat "standard --fix " (buffer-file-name)))
    (revert-buffer t t)))

(use-package js-mode
  :ensure nil
  :mode "\\.js[x]\\'"
  :hook
  (js-mode . lsp-deferred)
  ;; (after-save . daut/js-standard-fix-file)
  :bind
  ("C-c /" . daut/js-standard-fix-file)
  :init
  (setq lsp-diagnostics-provider :none)
  :config
  (setq js-indent-level 2))

;; npm i -g eslint
;; M-x lsp-install-server RET eslint
;; (use-package js2-mode
;;   :mode "\\.js\\'"
;;   :hook (js2-mode . lsp-deferred)
;;   :config
;;   (setq js-indent-level 2)
;;   (with-eval-after-load 'flycheck
;;     ;; https://github.com/mantoni/eslint_d.js
;;     ;; Install: npm -i -g eslint_d
;;     (when (executable-find "eslint")
;;       (setq flycheck-javascript-eslint-executable "eslint"))))
  
#+end_src
*** Lua
#+begin_src emacs-lisp

(use-package lua-mode
  :mode "\\.lua\\'"
  :hook (lua-mode . lsp-deferred)
  :config
  (setq lua-indent-level 2))

#+end_src
*** Go
#+begin_src emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :hook
  (go-mode . lsp-deferred)
  (before-save . gofmt-before-save)
  (go-mode . (lambda () (setq tab-width 2)))
  :config
  (require 'dap-go)
  (dap-go-setup))

(use-package go-playground
  :after go-mode)

(use-package gotest
  :after go-mode)

(use-package flycheck-golangci-lint
  :hook (go-mode . flycheck-golangci-lint-setup))

#+end_src
*** JSON
#+begin_src emacs-lisp

(use-package json-mode
  :mode "\\.json\\'"
  :hook
  (json-mode . lsp-deferred)
  :config
  (setq js-indent-level 2))

#+end_src
*** Restclient
#+begin_src emacs-lisp
(use-package jq-mode)

;;; load restclient-jq - allow restclient mode to use jq to process JSON results.
;; (fetch it from remote url if it's already there)
(let
    ((restclient-jq-filename "~/.emacs.d/restclient-jq.el")
     (restclient-jq-url
      "https://raw.githubusercontent.com/pashky/restclient.el/master/restclient-jq.el"))
  (progn
    (unless (file-exists-p restclient-jq-filename)
      (url-copy-file restclient-jq-url restclient-jq-filename))
    (load "~/.emacs.d/restclient-jq.el")
    ))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (require 'restclient-jq)
  (with-eval-after-load 'company
    (use-package company-restclient
      :defines company-backends
      :init (add-to-list 'company-backends 'company-restclient))))

#+end_src
*** Verb
An alternative to Restclient package
#+begin_src emacs-lisp
(use-package verb)
#+end_src
*** Yaml
#+begin_src emacs-lisp

(use-package yaml-mode
  :mode "\\.y[a]ml\\'")

#+end_src
*** Web
#+begin_src emacs-lisp
;; Major mode for editing web templates
(use-package web-mode
  :ensure nil
  :hook (web-mode . lsp-deferred)
  :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|svelte\\)$"
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))

;; CSS mode
(use-package css-mode
  :ensure nil
  :hook (css-mode . lsp-deferred)
  :init (setq css-indent-offset 2))

(use-package lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t)
  :config
  (add-to-list 'lsp-tailwindcss-major-modes 'web-mode))

(use-package emmet-mode
  :hook
  ((css-mode  . emmet-mode)
   (php-mode  . emmet-mode)
   (sgml-mode . emmet-mode)
   (rjsx-mode . emmet-mode)
   (web-mode  . emmet-mode)
   (vue-mode  . emmet-mode)))
#+end_src
*** Vue
#+begin_src emacs-lisp
;; vue-language-server should be installed too. npm i -g vls
(use-package vue-mode
  :mode "\\.vue\\'"
  :hook (vue-mode . lsp-deferred)
  :config
  (setq mmm-submode-decoration-level 2))
  ;; :custom
  ;; (setq lsp-vetur-emmet "inMarkupAndStylesheetFilesOnly"))
#+end_src
*** Elixir
#+begin_src emacs-lisp
(use-package elixir-mode
  :mode "\\.exs\\'"
  :hook (elixir-mode . lsp-deferred))
#+end_src
*** SQL
#+begin_src emacs-lisp
;; Needs sqls installed and sqlint would be nice also
;; sqls: go get github.com/lighttiger2505/sqls
;; sqlint: gem install sqlint
(use-package sql
  :hook
  (sql-mode . lsp)
  :config
  (setq lsp-sqls-timeout 10)
  (setq lsp-sqls-workspace-config-path "root"))
#+end_src
*** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src

** Flycheck
#+begin_src emacs-lisp

(use-package flycheck
  :diminish
  :commands flycheck-redefine-standard-error-levels
  :hook (after-init . global-flycheck-mode))

#+end_src
** Avy
#+begin_src emacs-lisp
(use-package avy
  :bind (("s-." . avy-goto-word-or-subword-1)
         ("s-," . avy-goto-char)
         ("C-c ." . avy-goto-word-or-subword-1)
         ("C-c ," . avy-goto-char)
         ("M-g f" . avy-goto-line))
  :config
  (setq avy-background t))
#+end_src
** Simple HTTPD
#+begin_src emacs-lisp
(use-package simple-httpd)
#+end_src
* AI Assistants
#+begin_src emacs-lisp
(use-package gptel)
#+end_src
* VCS
** Magit
#+begin_src emacs-lisp

(use-package magit
  :commands magit-status)

;; add options to magit like create PR, track issues etc.
(use-package forge
  :after magit)

#+end_src
** Git Gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :config (global-git-gutter-mode t))
;; try hl-mode (dired-mode . diff-hl-dired-mode)
#+end_src
* Terminals
** term-mode
#+begin_src emacs-lisp

(use-package term
  :commands term
  :config
  (setq term-prompt-regexp "^[^#$%>\\n]*[#$%>] *"))

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

#+end_src
** vterm
#+begin_src emacs-lisp

(use-package vterm
  :commands vterm
  :config
  (setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))

#+end_src
** eshell
#+begin_src emacs-lisp

(use-package eshell-git-prompt
  :after eshell)

(defun daut/configure-eshell ()
  ;; save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-history-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell
  :hook (eshell-first-time-mode . daut/configure-eshell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("zsh" "vim")))
  (eshell-git-prompt-use-theme 'powerline))

(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode))
#+end_src
* File Management
** Basic
#+begin_src emacs-lisp

;; Auto refresh buffers
(global-auto-revert-mode t)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Make buffer list usable after previous changes
;; https://github.com/syl20bnr/spacemacs/issues/7661
;; https://github.com/syl20bnr/spacemacs/issues/2667#issuecomment-136155556
(add-hook 'Buffer-menu-mode-hook 
          (lambda ()
            (setq-local revert-buffer-function
                        (lambda (&rest args)))))

;; Backup files directory path
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
(setq backup-by-copying-when-linked t)
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

#+end_src

** TODO Dired
Note: coreutils had to be installed on MacOS systems for group-directories-first to work so run `brew install coreutils`.
#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (when (string= system-type "darwin")
    (setq insert-directory-program (executable-find "gls")))
  (setq dired-kill-when-opening-new-dired-buffer t)
  :custom
  (dired-listing-switches "-agho --group-directories-first")
  (setq delete-by-moving-to-trash t))

;; (use-package dired-open
;;   :config
;;   (setq dired-open-extensions '(("png" . "open"))))

#+end_src

* Workspace Managment
** Other Window
#+begin_src emacs-lisp

(use-package ace-window
  :bind 
  (("s-[" . (lambda () (interactive) (other-window -1)))
  ("s-]" . (lambda () (interactive) (other-window 1)))))

#+end_src
** Perspective
#+begin_src emacs-lisp
(defun daut/persp-misc ()
  (interactive)
  (persp-switch "misc"))
(use-package perspective
  :init (persp-mode)
  :bind (("C-x k" . persp-kill-buffer*)
         ("s-}" . persp-next)
         ("s-{" . persp-prev))
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p")))

#+end_src
* Runtime Performance
#+begin_src emacs-lisp

;; make garbage collection pauses faster by decreasing the memory consumption threshold
;; this basically reverts threshold increase at the beginning of the file (which helps with load time)
(setq gc-cons-threshold (* 2 1000 1000))

;; Should make working with long lines faster https://emacs.stackexchange.com/questions/598/how-do-i-prevent-extremely-long-lines-making-emacs-slow
(setq bidi-inhibit-bpa t)
(setq bidi-paragraph-direction 'left-to-right)
(global-so-long-mode 1)
;; this package looks interesting
;; https://github.com/emacsmirror/gcmh/blob/master/gcmh.el

#+end_src
